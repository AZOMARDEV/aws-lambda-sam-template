AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  lambda_template

  Sample SAM Template for lambda_template

Parameters:
  JWTSecret:
    Type: String
    Description: Secret key for JWT token
    Default: mydevjwtsecret   # <-- default value for testing
  JWTExpiresIn:
    Type: String
    Default: 24h
    Description: JWT expiration time
  RefreshTokenSecret:
    Type: String
    Description: Secret key for refresh tokens
    Default: mydevrefreshsecret   # <-- default value for testing
  StageName:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    Description: The stage name for the API (dev or prod)
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 7
    MemorySize: 1000 # Set memory to 1000MB
    EphemeralStorage:
      Size: 1000 # Set ephemeral storage to 1000MB
    Tracing: Active
    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON
    # Add MONGODB_URI to all functions globally
    Environment:
      Variables:
        MONGODB_URI: mongodb+srv://jabadoorapp:jbH79nBVnVgk6BVE@jabadoorapp.n6uc5.mongodb.net/trueid?retryWrites=true&w=majority&appName=JabadoorApp
  Api:
    TracingEnabled: true
Resources:
  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref StageName # Use the parameter to define dev or prod
      Cors:
        AllowMethods: "'POST,GET,PUT,DELETE'" # Allow multiple methods
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Origin,Access-Control-Allow-Origin,Token, token, access_token, X-Refresh-Token,Metadata'"
        AllowOrigin: "'*'" # You can change this to a specific domain for security

  # Shared role for all functions that need to invoke others
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaInvokeAndSqsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*"
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:PurgeQueue
                Resource:
                  - !GetAtt NotificationSQSQueue.Arn
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub "${TemplatesBucket.Arn}/*"
  TemplatesBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        IgnorePublicAcls: false
        BlockPublicPolicy: false
        RestrictPublicBuckets: false
  TemplatesBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref TemplatesBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: PublicReadForPDFsFolder
            Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${TemplatesBucket}/pdfs/*"
  NotificationSQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: notification-queue
      VisibilityTimeout: 30  # Time in seconds messages stay invisible after being picked up
      MessageRetentionPeriod: 1209600  # 14 days max retention
      ReceiveMessageWaitTimeSeconds: 10 # Long polling
      DelaySeconds: 0

  RegisterAccountLambdaHandler:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: src/
      Handler: functions/auth/traditional-register.handler
      Runtime: nodejs20.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
      - x86_64
      Environment:
        Variables:
          SQS_QUEUE_URL: !GetAtt NotificationSQSQueue.QueueUrl
      Events:
        RegisterAccountAPIHandler:
          Type: Api
          Properties:
            Path: /auth/traditional/register
            Method: post
            RestApiId: !Ref MyApi
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - functions/auth/traditional-register.ts
  ValidationRegisterAccountLambdaHandler:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: src/
      Handler: functions/auth/traditional-verify.handler
      Runtime: nodejs20.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
      - x86_64
      Environment:
        Variables:
          SQS_QUEUE_URL: !GetAtt NotificationSQSQueue.QueueUrl
      Events:
        ValidationRegisterAccountAPIHandler:
          Type: Api
          Properties:
            Path: /auth/traditional/verify
            Method: post
            RestApiId: !Ref MyApi
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - functions/auth/traditional-verify.ts
  LoginAccountLambdaHandler:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: src/
      Handler: functions/auth/traditional-login.handler
      Runtime: nodejs20.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
      - x86_64
      Environment:
        Variables:
          SQS_QUEUE_URL: !GetAtt NotificationSQSQueue.QueueUrl
          JWT_SECRET: !Ref JWTSecret
          JWT_EXPIRES_IN: !Ref JWTExpiresIn
          REFRESH_TOKEN_SECRET: !Ref RefreshTokenSecret
      Events:
        LoginAccountAPIHandler:
          Type: Api
          Properties:
            Path: /auth/traditional/login
            Method: post
            RestApiId: !Ref MyApi
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - functions/auth/traditional-login.ts

  CombinedAccountLambdaHandler:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: src/
      Handler: functions/auth/mfa-combined-auth.handler
      Runtime: nodejs20.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
      - x86_64
      Environment:
        Variables:
          SQS_QUEUE_URL: !GetAtt NotificationSQSQueue.QueueUrl
          JWT_SECRET: !Ref JWTSecret
          JWT_EXPIRES_IN: !Ref JWTExpiresIn
          REFRESH_TOKEN_SECRET: !Ref RefreshTokenSecret
      Events:
        CombinedAccountAPIHandler:
          Type: Api
          Properties:
            Path: /auth/combined
            Method: post
            RestApiId: !Ref MyApi
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - functions/auth/mfa-combined-auth.ts
  CompleteAccountLambdaHandler:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: src/
      Handler: functions/auth/complete-account.handler
      Runtime: nodejs20.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
      - x86_64
      Environment:
        Variables:
          SQS_QUEUE_URL: !GetAtt NotificationSQSQueue.QueueUrl
          JWT_SECRET: !Ref JWTSecret
          JWT_EXPIRES_IN: !Ref JWTExpiresIn
          REFRESH_TOKEN_SECRET: !Ref RefreshTokenSecret
      Events:
        CompleteAccountAPIHandler:
          Type: Api
          Properties:
            Path: /auth/complete-account
            Method: post
            RestApiId: !Ref MyApi
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - functions/auth/complete-account.ts

  LogOutAccountLambdaHandler:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: src/
      Handler: functions/auth/logout.handler
      Runtime: nodejs20.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
      - x86_64
      Environment:
        Variables:
          JWT_SECRET: !Ref JWTSecret
          JWT_EXPIRES_IN: !Ref JWTExpiresIn
          REFRESH_TOKEN_SECRET: !Ref RefreshTokenSecret
      Events:
        LogOutAccountAPIHandler:
          Type: Api
          Properties:
            Path: /auth/logout
            Method: post
            RestApiId: !Ref MyApi
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - functions/auth/logout.ts
  RefreshTokenAccountLambdaHandler:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: src/
      Handler: functions/auth/refresh-token.handler
      Runtime: nodejs20.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
      - x86_64
      Environment:
        Variables:
          JWT_SECRET: !Ref JWTSecret
          JWT_EXPIRES_IN: !Ref JWTExpiresIn
          REFRESH_TOKEN_SECRET: !Ref RefreshTokenSecret
      Events:
        RefreshTokenAccountAPIHandler:
          Type: Api
          Properties:
            Path: /auth/refresh-token
            Method: post
            RestApiId: !Ref MyApi
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - functions/auth/refresh-token.ts
  ValidateTokenAccountLambdaHandler:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: src/
      Handler: functions/auth/validation-token.handler
      Runtime: nodejs20.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
      - x86_64
      Environment:
        Variables:
          JWT_SECRET: !Ref JWTSecret
          JWT_EXPIRES_IN: !Ref JWTExpiresIn
          REFRESH_TOKEN_SECRET: !Ref RefreshTokenSecret
      Events:
        ValidateTokenAccountAPIHandler:
          Type: Api
          Properties:
            Path: /auth/validation-token
            Method: post
            RestApiId: !Ref MyApi
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - functions/auth/validation-token.ts

  ForgetPasswordAccountLambdaHandler:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: src/
      Handler: functions/auth/forget-password.handler
      Runtime: nodejs20.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
      - x86_64
      Environment:
        Variables:
          SQS_QUEUE_URL: !GetAtt NotificationSQSQueue.QueueUrl
      Events:
        ForgetPasswordAccountAPIHandler:
          Type: Api
          Properties:
            Path: /auth/forget-password
            Method: post
            RestApiId: !Ref MyApi
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - functions/auth/forget-password.ts
  ResetPasswordAccountLambdaHandler:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: src/
      Handler: functions/auth/reset-password.handler
      Runtime: nodejs20.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
      - x86_64
      Events:
        ResetPasswordAccountAPIHandler:
          Type: Api
          Properties:
            Path: /auth/reset-password
            Method: post
            RestApiId: !Ref MyApi
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - functions/auth/reset-password.ts

  ResendValidationCodeAccountLambdaHandler:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: src/
      Handler: functions/auth/resend-verification-code.handler
      Runtime: nodejs20.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
      - x86_64
      Environment:
        Variables:
          SQS_QUEUE_URL: !GetAtt NotificationSQSQueue.QueueUrl
      Events:
        ResendValidationCodeAccountAPIHandler:
          Type: Api
          Properties:
            Path: /auth/resend-validation-code
            Method: post
            RestApiId: !Ref MyApi
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - functions/auth/resend-verification-code.ts

  MessageSenderHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: functions/notifications/send.handler
      Runtime: nodejs20.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Environment:
        Variables:
          BREVO_API_KEY: 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
          SQS_QUEUE_URL: !GetAtt NotificationSQSQueue.QueueUrl
          TEMPLATE_BUCKET: !Ref TemplatesBucket
          
      Events:
        EmailSQSQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt NotificationSQSQueue.Arn
        MessageSenderHandlerAPI:
          Type: Api
          Properties:
            Path: /email/sender
            Method: post
            RestApiId: !Ref MyApi
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - functions/notifications/send.ts

  CreateProjectHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: functions/project/create.handler
      Runtime: nodejs20.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        CreateProjectHandlerAPI:
          Type: Api
          Properties:
            Path: /project/create
            Method: post
            RestApiId: !Ref MyApi
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - functions/project/create.ts
  UpdateProjectHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: functions/project/update.handler
      Runtime: nodejs20.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        UpdateProjectHandlerAPI:
          Type: Api
          Properties:
            Path: /project/update
            Method: post
            RestApiId: !Ref MyApi
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - functions/project/update.ts

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'
Outputs:
  # API Gateway endpoint URL for the specified Stage (dev or prod)
  WebEndpoint:
    Description: API Gateway endpoint URL for the specified stage
    Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/"

